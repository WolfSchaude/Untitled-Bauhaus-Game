using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class EventSave
{
	public int[] Wait;
	public MemorySave[] Run;
	public int[] Fin;

	public EventSave(int[] wait, MemorySave[] run, int[] fin)
	{
		Wait = wait;
		Run = run;
		Fin = fin;
	}
}

public class EventScript : MonoBehaviour, ISaveableInterface
{
	public GameObject prefab;
	public GameObject randomprefab;
	public GameObject parent;

	public GameObject Playervariables;
	public AnimationStarter AnimStarter;


	public List<GameObject> AllEvents;
	public GameObject ThatOneRandomEvent;

	public Text AnzahlEvents;

	public bool Collapsed;

	private bool AlreadyGenerated = false;

	private int ActiveEvents;

	bool Laedtgerade;

	//-------------------------------( Addition for InWorldEvents )-------------------------------//
	/// <summary>
	/// Reference to: Savegamemanager GO
	/// </summary>
	[SerializeField] GameObject SaveGameKeeper;

	/// <summary>
	/// Parent transform for the InWorldEvents
	/// </summary>
	[SerializeField] Transform _Transform_InWorldParent;
	/// <summary>
	/// PreFab to clone InWorldEvents of
	/// </summary>
	[SerializeField] GameObject _PreFab_InWorldEvent;

	/// <summary>
	/// All the Events that are not taking place atm
	/// </summary>
	[SerializeField] List<Event> _Events_Waiting = new List<Event>();
	/// <summary>
	/// All the Events that are running atm
	/// </summary>
	[SerializeField] List<Event> _Events_Running = new List<Event>();
	/// <summary>
	/// The Events that are finished
	/// </summary>
	[SerializeField] List<Event> _Events_Finished = new List<Event>();

	/// <summary>
	/// Gameobject version of _Events_Running, holds tge instances in the GameWorld
	/// </summary>
	[SerializeField] List<GameObject> Events_Running = new List<GameObject>();

	[SerializeField] bool RandomEventVorhanden = false;

	/// <summary>
	/// Reference to: AnimationStarter for the EventMenu for the InWorldEvents
	/// </summary>
	[SerializeField] AnimationStarter AnimStarterInWorld;

	/// <summary>
	/// Reference to: Bausystem-Script, nneded to get the positions of the different parts of the Bauhaus
	/// </summary>
	[SerializeField] Bausystem _Bausystem;

	public void GenerateList(bool[] save)
	{
		Debug.Log("Generated by Savegame");

		if (!AlreadyGenerated)
		{
			AllEvents = new List<GameObject>();

			for (int i = 0; i < EventLoader.ec.Events.Count; i++)
			{
				AllEvents.Add(NewEvent(i, save[i]));
			}

			AlreadyGenerated = true;

			ThatOneRandomEvent = NewRandomEvent();

			ActiveEvents = AllEvents.FindAll(actives => actives.activeSelf == true).Count;
			if (ThatOneRandomEvent.activeSelf)
			{
				ActiveEvents++;
			}

			if (ActiveEvents == 0)
			{
				AnimStarter.CloseMenu();
			}
			if (ActiveEvents == 1)
			{
				AnzahlEvents.text = ActiveEvents + " Event aktiv";
			}
			else
			{
				AnzahlEvents.text = ActiveEvents + " Events aktiv";
			}

			Laedtgerade = false;
		}
	}

	public GameObject NewEvent(int i, bool SavedHired)
	{
		var x = Instantiate(prefab, parent.transform);
		var y = EventLoader.ec.Events[i];

		x.GetComponent<Event_Memory>().SetMemory(y, Playervariables, SavedHired);

		x.GetComponentInChildren<Text>().text = y.EventText;

		x.GetComponentsInChildren<Button>()[0].GetComponentInChildren<Text>().text
			= y.EventOption1 + Environment.NewLine
			+ "Ansehensveränderung: " + y.Option1_Ansehen + Environment.NewLine
			+ "Politische Tragweite: " + y.Option1_Politik + Environment.NewLine
			+ "Kosten: " + y.Option1_Geld * -1 + " RM";


		x.GetComponentsInChildren<Button>()[1].GetComponentInChildren<Text>().text
			= y.EventOption2 + Environment.NewLine
			+ "Ansehensveränderung: " + y.Option2_Ansehen + Environment.NewLine
			+ "Politische Tragweite: " + y.Option2_Politik + Environment.NewLine
			+ "Kosten: " + y.Option2_Geld * -1 + " RM";

		return x;
	}

	public GameObject NewRandomEvent()
	{
		var x = Instantiate(randomprefab, parent.transform);

		var rand = UnityEngine.Random.Range(0, EventLoader.ec_random.Events.Count);

		x.GetComponent<RandomEvent_Memory>().SetMemory(EventLoader.ec_random.Events[rand], Playervariables);

		x.GetComponentInChildren<Text>().text = EventLoader.ec_random.Events[rand].EventText;

		x.GetComponentsInChildren<Button>()[0].GetComponentInChildren<Text>().text
					= EventLoader.ec_random.Events[rand].EventOption1 + Environment.NewLine
					+ "Ansehensveränderung: " + EventLoader.ec_random.Events[rand].Option1_Ansehen + Environment.NewLine
					+ "Politische Tragweite: " + EventLoader.ec_random.Events[rand].Option1_Politik + Environment.NewLine
					+ "Kosten: " + EventLoader.ec_random.Events[rand].Option1_Geld * -1 + " RM";

		x.GetComponentsInChildren<Button>()[1].GetComponentInChildren<Text>().text
					= EventLoader.ec_random.Events[rand].EventOption2 + Environment.NewLine
					+ "Ansehensveränderung: " + EventLoader.ec_random.Events[rand].Option2_Ansehen + Environment.NewLine
					+ "Politische Tragweite: " + EventLoader.ec_random.Events[rand].Option2_Politik + Environment.NewLine
					+ "Kosten: " + EventLoader.ec_random.Events[rand].Option2_Geld * -1 + " RM";

		return x;
	}
	
	public GameObject NewInWorldEvent(Event ev)
	{
		var x = Instantiate(_PreFab_InWorldEvent, _Transform_InWorldParent);

		x.GetComponent<InWorldEvent_Memory>().SetValues(ev, AnimStarterInWorld, Playervariables);

		Vector3 newPos = _Bausystem.Structures[ev.CorrespondingBuildingID].transform.position + new Vector3(UnityEngine.Random.Range(-11, 10), 0, UnityEngine.Random.Range(-11, 10));
		newPos.y = 20;
		x.transform.position = newPos;

		return x;
	}

	#region ISaveableInterface Methods
	public void Save()
	{
		var x = new bool[AllEvents.Count];

		for (int i = 0; i < AllEvents.Count; i++)
		{
			x[i] = AllEvents[i].GetComponent<Event_Memory>().IsFinished;
		}

		SaveGameKeeper.GetComponent<SaveGameManager>().Savestate.IsEventFinished = x;

		int[] Wait = new int[_Events_Waiting.Count];
		MemorySave[] Run = new MemorySave[_Events_Running.Count];
		int[] Fin = new int[_Events_Finished.Count];

		for (int i = 0; i < _Events_Waiting.Count; i++)
		{
			Wait[i] = _Events_Waiting[i].ID;
		}

		for (int i = 0; i < Events_Running.Count; i++)
		{
			Run[i] = Events_Running[i].GetComponent<InWorldEvent_Memory>().EventSave();
		}

		for (int i = 0; i < _Events_Finished.Count; i++)
		{
			Fin[i] = _Events_Finished[i].ID;
		}

		EventSave y = new EventSave(Wait, Run, Fin);

		SaveGameKeeper.GetComponent<SaveGameManager>().Savestate.CurrentEventState = y;
		SaveGameKeeper.GetComponent<SaveGameManager>().WhoHasSaved[7] = true;
	}

	public void Load(Save save)
	{
		GenerateList(save.IsEventFinished);

		for (int i = 0; i < save.CurrentEventState.Wait.Length; i++)
		{
			_Events_Waiting.Add(EventLoader.ec.Events.Find(j => j.ID == save.CurrentEventState.Wait[i]));
		}

		for (int i = 0; i < save.CurrentEventState.Run.Length; i++)
		{
			//List<Event> wiederherstellen
			_Events_Running.Add(EventLoader.ec.Events.Find(j => j.ID == save.CurrentEventState.Run[i].EventID));

			//List<GameObjects> wiederherstellen
			var x = Instantiate(_PreFab_InWorldEvent, _Transform_InWorldParent);

			x.GetComponent<InWorldEvent_Memory>().SetValues(_Events_Running[i], AnimStarterInWorld, Playervariables);

			x.GetComponent<InWorldEvent_Memory>().EventLoad(save.CurrentEventState.Run[i]);

			Vector3 newPos = _Bausystem.Structures[_Events_Running[i].CorrespondingBuildingID].transform.position + new Vector3(UnityEngine.Random.Range(-11, 10), 0, UnityEngine.Random.Range(-11, 10));
			newPos.y = 20;
			x.transform.position = newPos;

			Events_Running.Add(x);
		}

		for (int i = 0; i < save.CurrentEventState.Fin.Length; i++)
		{
			_Events_Finished.Add(EventLoader.ec.Events.Find(j => j.ID == save.CurrentEventState.Fin[i]));
		}
	}

	public void LoadStart()
	{
		//Populate List of Events
		foreach (var ev in EventLoader.ec.Events)
		{
			_Events_Waiting.Add(ev);
		}

		//AddRandomEvent();

		//Set up the Count-Downs
		foreach (var ev in _Events_Waiting)
		{
			//String SpecialEvent Analysis
			if (!string.IsNullOrEmpty(ev.SpecialEvents))
			{
				var x = ev.SpecialEvents.Split(',');

				foreach (var item in x)
				{
					if (item.Contains("Einblenden:"))
					{
						char[] EinblendenChars = { 'E', 'i', 'n', 'b', 'l', 'e', 'n', 'd', 'e', 'n', ':' };
						var y = item.TrimStart(EinblendenChars);
						var z = y.Split('.');
						var a = new int[3];

						for (int i = 0; i < z.Length; i++)
						{
							a[i] = int.Parse(z[i]);
						}

						ev.TimeLeftToShow = Playervariables.GetComponent<NewTimeKeeper>().BerechneTageVonJetzt(a[0], a[1], a[2]);
					}
				}
			}
			if (ev.TimeLeftToShow == -1) //If it didn't get changed, set it now with a prelay of 90 Days
			{
				ev.TimeLeftToShow = Playervariables.GetComponent<NewTimeKeeper>().BerechneTageVonJetzt(ev.Event_Tag, ev.Event_Monat, ev.Event_Jahr) - 90;
			}
		}

		CheckIfEventIsRunningAtStart();
	}

	private void AddRandomEvent()
	{
		// 1 = Feinde des Vaterlands, 2 = Student hat Geldprobleme, 3 = Werkstatt renovieren, 4 = Dozent will mehr Geld

		int x = UnityEngine.Random.Range(1, 5);
		bool NumberIsSet = false;

		List<int> GebauteWerkstätteIDs = new List<int>();

		while (!NumberIsSet)
		{
			if (x == 3)
			{
				for (int i = 0; i < _Bausystem.NumberOfStructures; i++)
				{
					if (_Bausystem.Structures[i].GetComponent<Struktur>().OwnMainTypeInt == 1 && _Bausystem.Structures[i].GetComponent<Struktur>().IsPlaced)
					{
						GebauteWerkstätteIDs.Add(i);
					}
				}

				if (GebauteWerkstätteIDs.Count > 0)
				{


					NumberIsSet = true;
				}

			}

			if (x == 4)
			{

			}

			if (!NumberIsSet)
			{
				x = UnityEngine.Random.Range(1, 5);
			}
		}


		//Event ev = EventLoader.ec_random.Events[];
	}

	#endregion

	public void CountAllRelevantEventsDown()
	{
		List<Event> ToDelete_Wait = new List<Event>();
		List<Event> ToDelete_Run = new List<Event>();

		//Count down the Waiting Events and instantiate them if necessary
		foreach (var ev in _Events_Waiting)
		{
			if (ev.TimeLeftToShow <= 0)
			{
				var x = NewInWorldEvent(ev);

				Events_Running.Add(x);
				ev.TimeLeftToLife = x.GetComponent<InWorldEvent_Memory>().DaysLeft;
				_Events_Running.Add(ev);

				ToDelete_Wait.Add(ev); //Delete after loop
			}
			else
			{
				ev.TimeLeftToShow--;
			}
		}

		//Count down the Running events and destroy them if necessary
		foreach (var iwev in _Events_Running)
		{
			if (iwev.TimeLeftToLife <= 0)
			{
				Destroy(Events_Running.Find(j => j.GetComponent<InWorldEvent_Memory>().Memory.ID == iwev.ID));
				_Events_Finished.Add(iwev);

				ToDelete_Run.Add(iwev); //Delete after loop
			}
			else
			{
				iwev.TimeLeftToLife--;
			}
		}
		foreach (var deletion in ToDelete_Wait)
		{
			_Events_Waiting.Remove(deletion);
		}
		foreach (var deletion in ToDelete_Run)
		{
			_Events_Running.Remove(deletion);
		}
	}

	void CheckIfEventIsRunningAtStart()
	{
		List<Event> ToDelete_Wait = new List<Event>();

		for (int i = 0; i < _Events_Waiting.Count; i++)
		{
			if (_Events_Waiting[i].TimeLeftToShow <= 0)
			{
				var x = NewInWorldEvent(_Events_Waiting[i]);

				Events_Running.Add(x);
				_Events_Waiting[i].TimeLeftToLife = x.GetComponent<InWorldEvent_Memory>().DaysLeft;
				_Events_Running.Add(_Events_Waiting[i]);

				ToDelete_Wait.Add(_Events_Waiting[i]); //Delete after loop
			}
		}

		foreach (var deletion in ToDelete_Wait)
		{
			_Events_Waiting.Remove(deletion);
		}
	}
}
