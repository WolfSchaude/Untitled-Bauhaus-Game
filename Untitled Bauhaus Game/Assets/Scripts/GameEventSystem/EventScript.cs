using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class EventScript : MonoBehaviour, ISaveableInterface
{
	public GameObject FeedbackTicker;

	public GameObject prefab;
	public GameObject randomprefab;
	public GameObject parent;

	public GameObject Playervariables;
	public GameObject SaveGamemanager;
	public AnimationStarter AnimStarter;


	public List<GameObject> AllEvents;
	public GameObject ThatOneRandomEvent;

	public Text AnzahlEvents;

	public bool Collapsed;

	private bool AlreadyGenerated = false;

	private int ActiveEvents;

	bool Laedtgerade;

	//-------------------------------( Addition for InWorldEvents )-------------------------------//
	/// <summary>
	/// Testingwise here the prototype reference hardcoded, alter runtime generation for more flexibility
	/// </summary>
	[SerializeField] InWorldEvent_Memory InWorldEvent1;

	/// <summary>
	/// Reference to: AnimationStarter for the EventMenu for the InWorldEvents
	/// </summary>
	[SerializeField] AnimationStarter AnimStarterInWorld;

	void Start()
    {
		Laedtgerade = GameObject.Find("SceneSwitcher").GetComponent<SaveGameLoader>().LoadSaveGame;
		if (!Laedtgerade)
		{
			Debug.Log("Generated by Start Method");

			if (!AlreadyGenerated)
			{
				AllEvents = new List<GameObject>();

				for (int i = 0; i < EventLoader.ec.Events.Count; i++)
				{
					AllEvents.Add(NewEvent(i, false));
				}

				InWorldEvent1.SetValues(EventLoader.ec.Events[0], AnimStarterInWorld);

				AlreadyGenerated = true;
				Collapsed = true;


				ThatOneRandomEvent = NewRandomEvent();
			}
		}
	}

    void Update()
    {
		if (!Laedtgerade)
		{
			ActiveEvents = AllEvents.FindAll(actives => actives.activeSelf == true).Count;
			if (ThatOneRandomEvent != null)
			{
				if (ThatOneRandomEvent.activeSelf)
				{
					ActiveEvents++;
				}
			}

			if (ActiveEvents == 0)
			{
				AnimStarter.CloseMenu();
			}

			if (ActiveEvents == 1)
			{
				AnzahlEvents.text = ActiveEvents + " Event aktiv";
			}
			else
			{
				AnzahlEvents.text = ActiveEvents + " Events aktiv";
			}

			if (ThatOneRandomEvent != null)
			{
				if (ThatOneRandomEvent.GetComponent<RandomEvent_Memory>().IsFinished)
				{
					ThatOneRandomEvent = NewRandomEvent();
				}
			}
		}

		foreach (var Event in AllEvents)
		{
			if (Event.GetComponent<Event_Memory>().TimerCounter == 7)
			{
				AnimStarter.OpenMenu();
			}
		}
	}

	public void GenerateList(bool[] save)
	{
		Debug.Log("Generated by Savegame");

		if (!AlreadyGenerated)
		{
			AllEvents = new List<GameObject>();

			for (int i = 0; i < EventLoader.ec.Events.Count; i++)
			{
				AllEvents.Add(NewEvent(i, save[i]));
			}

			AlreadyGenerated = true;

			ThatOneRandomEvent = NewRandomEvent();

			ActiveEvents = AllEvents.FindAll(actives => actives.activeSelf == true).Count;
			if (ThatOneRandomEvent.activeSelf)
			{
				ActiveEvents++;
			}

			if (ActiveEvents == 0)
			{
				AnimStarter.CloseMenu();
			}
			if (ActiveEvents == 1)
			{
				AnzahlEvents.text = ActiveEvents + " Event aktiv";
			}
			else
			{
				AnzahlEvents.text = ActiveEvents + " Events aktiv";
			}

			Laedtgerade = false;
		}
	}

	public GameObject NewEvent(int i, bool SavedHired)
	{
		var x = Instantiate(prefab, parent.transform);
		var y = EventLoader.ec.Events[i];

		x.GetComponent<Event_Memory>().SetMemory(y, Playervariables, SavedHired);
		x.GetComponent<Event_Memory>().FeedbackTicker = FeedbackTicker;

		x.GetComponentInChildren<Text>().text = y.EventText;

		x.GetComponentsInChildren<Button>()[0].GetComponentInChildren<Text>().text
			= y.EventOption1 + Environment.NewLine
			+ "Ansehensveränderung: " + y.Option1_Ansehen + Environment.NewLine
			+ "Politische Tragweite: " + y.Option1_Politik + Environment.NewLine
			+ "Kosten: " + y.Option1_Geld * -1 + " RM";


		x.GetComponentsInChildren<Button>()[1].GetComponentInChildren<Text>().text
			= y.EventOption2 + Environment.NewLine
			+ "Ansehensveränderung: " + y.Option2_Ansehen + Environment.NewLine
			+ "Politische Tragweite: " + y.Option2_Politik + Environment.NewLine
			+ "Kosten: " + y.Option2_Geld * -1 + " RM";

		return x;
	}

	public GameObject NewRandomEvent()
	{
		var x = Instantiate(randomprefab, parent.transform);

		var rand = UnityEngine.Random.Range(0, EventLoader.rec.RandomEvents.Count);

		x.GetComponent<RandomEvent_Memory>().SetMemory(EventLoader.rec.RandomEvents[rand], Playervariables);

		x.GetComponent<RandomEvent_Memory>().FeedbackTicker = FeedbackTicker;

		x.GetComponentInChildren<Text>().text = EventLoader.rec.RandomEvents[rand].EventText;

		x.GetComponentsInChildren<Button>()[0].GetComponentInChildren<Text>().text
					= EventLoader.rec.RandomEvents[rand].EventOption1 + Environment.NewLine
					+ "Ansehensveränderung: " + EventLoader.rec.RandomEvents[rand].Option1_Ansehen + Environment.NewLine
					+ "Politische Tragweite: " + EventLoader.rec.RandomEvents[rand].Option1_Politik + Environment.NewLine
					+ "Kosten: " + EventLoader.rec.RandomEvents[rand].Option1_Geld * -1 + " RM";

		x.GetComponentsInChildren<Button>()[1].GetComponentInChildren<Text>().text
					= EventLoader.rec.RandomEvents[rand].EventOption2 + Environment.NewLine
					+ "Ansehensveränderung: " + EventLoader.rec.RandomEvents[rand].Option2_Ansehen + Environment.NewLine
					+ "Politische Tragweite: " + EventLoader.rec.RandomEvents[rand].Option2_Politik + Environment.NewLine
					+ "Kosten: " + EventLoader.rec.RandomEvents[rand].Option2_Geld * -1 + " RM";

		return x;
	}

	public void Save()
	{
		var x = new bool[AllEvents.Count];

		for (int i = 0; i < AllEvents.Count; i++)
		{
			x[i] = AllEvents[i].GetComponent<Event_Memory>().IsFinished;
		}

		SaveGamemanager.GetComponent<SaveGameManager>().Savestate.IsEventFinished = x;
		SaveGamemanager.GetComponent<SaveGameManager>().WhoHasSaved[7] = true;
	}

	public void Load(Save save)
	{
		GenerateList(save.IsEventFinished);
	}
}
